// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: products.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CountProducts = `-- name: CountProducts :one
SELECT COUNT(*) FROM products
WHERE is_active = true
`

func (q *Queries) CountProducts(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, CountProducts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountProductsWithFilter = `-- name: CountProductsWithFilter :one
SELECT COUNT(*) FROM products
WHERE is_active = true
  AND ($1::text IS NULL OR name ILIKE '%' || $1 || '%')
  AND ($2::uuid IS NULL OR category_id = $2)
  AND ($3::uuid IS NULL OR supplier_id = $3)
`

type CountProductsWithFilterParams struct {
	Column1 string      `json:"column_1"`
	Column2 pgtype.UUID `json:"column_2"`
	Column3 pgtype.UUID `json:"column_3"`
}

func (q *Queries) CountProductsWithFilter(ctx context.Context, arg *CountProductsWithFilterParams) (int64, error) {
	row := q.db.QueryRow(ctx, CountProductsWithFilter, arg.Column1, arg.Column2, arg.Column3)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateProduct = `-- name: CreateProduct :one
INSERT INTO products (sku, name, description, category_id, supplier_id, unit_price, min_stock_level)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, sku, name, description, category, unit_price, is_active, created_at, updated_at, category_id, supplier_id, min_stock_level
`

type CreateProductParams struct {
	Sku           string         `json:"sku"`
	Name          string         `json:"name"`
	Description   *string        `json:"description"`
	CategoryID    pgtype.UUID    `json:"category_id"`
	SupplierID    pgtype.UUID    `json:"supplier_id"`
	UnitPrice     pgtype.Numeric `json:"unit_price"`
	MinStockLevel *int32         `json:"min_stock_level"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg *CreateProductParams) (*Product, error) {
	row := q.db.QueryRow(ctx, CreateProduct,
		arg.Sku,
		arg.Name,
		arg.Description,
		arg.CategoryID,
		arg.SupplierID,
		arg.UnitPrice,
		arg.MinStockLevel,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Sku,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.UnitPrice,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CategoryID,
		&i.SupplierID,
		&i.MinStockLevel,
	)
	return &i, err
}

const DeleteProduct = `-- name: DeleteProduct :exec
UPDATE products
SET is_active = false, updated_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, DeleteProduct, id)
	return err
}

const GetProduct = `-- name: GetProduct :one
SELECT id, sku, name, description, category, unit_price, is_active, created_at, updated_at, category_id, supplier_id, min_stock_level FROM products
WHERE id = $1
`

func (q *Queries) GetProduct(ctx context.Context, id pgtype.UUID) (*Product, error) {
	row := q.db.QueryRow(ctx, GetProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Sku,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.UnitPrice,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CategoryID,
		&i.SupplierID,
		&i.MinStockLevel,
	)
	return &i, err
}

const GetProductBySKU = `-- name: GetProductBySKU :one
SELECT id, sku, name, description, category, unit_price, is_active, created_at, updated_at, category_id, supplier_id, min_stock_level FROM products
WHERE sku = $1
`

func (q *Queries) GetProductBySKU(ctx context.Context, sku string) (*Product, error) {
	row := q.db.QueryRow(ctx, GetProductBySKU, sku)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Sku,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.UnitPrice,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CategoryID,
		&i.SupplierID,
		&i.MinStockLevel,
	)
	return &i, err
}

const GetProductsBySupplier = `-- name: GetProductsBySupplier :many
SELECT p.id, p.sku, p.name, p.description, p.category, p.unit_price, p.is_active, p.created_at, p.updated_at, p.category_id, p.supplier_id, p.min_stock_level, c.name as category_name, s.name as supplier_name
FROM products p
LEFT JOIN categories c ON p.category_id = c.id
LEFT JOIN suppliers s ON p.supplier_id = s.id
WHERE p.supplier_id = $1 AND p.is_active = true
ORDER BY p.name
`

type GetProductsBySupplierRow struct {
	ID            pgtype.UUID        `json:"id"`
	Sku           string             `json:"sku"`
	Name          string             `json:"name"`
	Description   *string            `json:"description"`
	Category      *string            `json:"category"`
	UnitPrice     pgtype.Numeric     `json:"unit_price"`
	IsActive      *bool              `json:"is_active"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	CategoryID    pgtype.UUID        `json:"category_id"`
	SupplierID    pgtype.UUID        `json:"supplier_id"`
	MinStockLevel *int32             `json:"min_stock_level"`
	CategoryName  *string            `json:"category_name"`
	SupplierName  *string            `json:"supplier_name"`
}

func (q *Queries) GetProductsBySupplier(ctx context.Context, supplierID pgtype.UUID) ([]*GetProductsBySupplierRow, error) {
	rows, err := q.db.Query(ctx, GetProductsBySupplier, supplierID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetProductsBySupplierRow{}
	for rows.Next() {
		var i GetProductsBySupplierRow
		if err := rows.Scan(
			&i.ID,
			&i.Sku,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.UnitPrice,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CategoryID,
			&i.SupplierID,
			&i.MinStockLevel,
			&i.CategoryName,
			&i.SupplierName,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListProducts = `-- name: ListProducts :many
SELECT p.id, p.sku, p.name, p.description, p.category, p.unit_price, p.is_active, p.created_at, p.updated_at, p.category_id, p.supplier_id, p.min_stock_level, c.name as category_name, s.name as supplier_name
FROM products p
LEFT JOIN categories c ON p.category_id = c.id
LEFT JOIN suppliers s ON p.supplier_id = s.id
WHERE p.is_active = true
ORDER BY p.name
LIMIT $1 OFFSET $2
`

type ListProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListProductsRow struct {
	ID            pgtype.UUID        `json:"id"`
	Sku           string             `json:"sku"`
	Name          string             `json:"name"`
	Description   *string            `json:"description"`
	Category      *string            `json:"category"`
	UnitPrice     pgtype.Numeric     `json:"unit_price"`
	IsActive      *bool              `json:"is_active"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	CategoryID    pgtype.UUID        `json:"category_id"`
	SupplierID    pgtype.UUID        `json:"supplier_id"`
	MinStockLevel *int32             `json:"min_stock_level"`
	CategoryName  *string            `json:"category_name"`
	SupplierName  *string            `json:"supplier_name"`
}

func (q *Queries) ListProducts(ctx context.Context, arg *ListProductsParams) ([]*ListProductsRow, error) {
	rows, err := q.db.Query(ctx, ListProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListProductsRow{}
	for rows.Next() {
		var i ListProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.Sku,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.UnitPrice,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CategoryID,
			&i.SupplierID,
			&i.MinStockLevel,
			&i.CategoryName,
			&i.SupplierName,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListProductsWithFilter = `-- name: ListProductsWithFilter :many
SELECT p.id, p.sku, p.name, p.description, p.category, p.unit_price, p.is_active, p.created_at, p.updated_at, p.category_id, p.supplier_id, p.min_stock_level, c.name as category_name, s.name as supplier_name
FROM products p
LEFT JOIN categories c ON p.category_id = c.id
LEFT JOIN suppliers s ON p.supplier_id = s.id
WHERE p.is_active = true
  AND ($1::text IS NULL OR p.name ILIKE '%' || $1 || '%')
  AND ($2::uuid IS NULL OR p.category_id = $2)
  AND ($3::uuid IS NULL OR p.supplier_id = $3)
ORDER BY 
  CASE WHEN $6 = 'name' AND $7 = 'asc' THEN p.name END ASC,
  CASE WHEN $6 = 'name' AND $7 = 'desc' THEN p.name END DESC,
  CASE WHEN $6 = 'unit_price' AND $7 = 'asc' THEN p.unit_price END ASC,
  CASE WHEN $6 = 'unit_price' AND $7 = 'desc' THEN p.unit_price END DESC,
  CASE WHEN $6 = 'created_at' AND $7 = 'asc' THEN p.created_at END ASC,
  CASE WHEN $6 = 'created_at' AND $7 = 'desc' THEN p.created_at END DESC
LIMIT $4 OFFSET $5
`

type ListProductsWithFilterParams struct {
	Column1 string      `json:"column_1"`
	Column2 pgtype.UUID `json:"column_2"`
	Column3 pgtype.UUID `json:"column_3"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
	Column6 interface{} `json:"column_6"`
	Column7 interface{} `json:"column_7"`
}

type ListProductsWithFilterRow struct {
	ID            pgtype.UUID        `json:"id"`
	Sku           string             `json:"sku"`
	Name          string             `json:"name"`
	Description   *string            `json:"description"`
	Category      *string            `json:"category"`
	UnitPrice     pgtype.Numeric     `json:"unit_price"`
	IsActive      *bool              `json:"is_active"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	CategoryID    pgtype.UUID        `json:"category_id"`
	SupplierID    pgtype.UUID        `json:"supplier_id"`
	MinStockLevel *int32             `json:"min_stock_level"`
	CategoryName  *string            `json:"category_name"`
	SupplierName  *string            `json:"supplier_name"`
}

func (q *Queries) ListProductsWithFilter(ctx context.Context, arg *ListProductsWithFilterParams) ([]*ListProductsWithFilterRow, error) {
	rows, err := q.db.Query(ctx, ListProductsWithFilter,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Limit,
		arg.Offset,
		arg.Column6,
		arg.Column7,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListProductsWithFilterRow{}
	for rows.Next() {
		var i ListProductsWithFilterRow
		if err := rows.Scan(
			&i.ID,
			&i.Sku,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.UnitPrice,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CategoryID,
			&i.SupplierID,
			&i.MinStockLevel,
			&i.CategoryName,
			&i.SupplierName,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListProductsWithStock = `-- name: ListProductsWithStock :many
SELECT p.id, p.sku, p.name, p.description, p.category, p.unit_price, p.is_active, p.created_at, p.updated_at, p.category_id, p.supplier_id, p.min_stock_level, c.name as category_name, s.name as supplier_name,
       COALESCE(SUM(sl.quantity), 0) as total_stock,
       COALESCE(SUM(sl.reserved_quantity), 0) as total_reserved,
       COALESCE(SUM(sl.available_quantity), 0) as total_available
FROM products p
LEFT JOIN categories c ON p.category_id = c.id
LEFT JOIN suppliers s ON p.supplier_id = s.id
LEFT JOIN stock_levels sl ON p.id = sl.product_id
WHERE p.is_active = true
  AND ($1::text IS NULL OR p.name ILIKE '%' || $1 || '%')
  AND ($2::uuid IS NULL OR p.category_id = $2)
  AND ($3::uuid IS NULL OR p.supplier_id = $3)
GROUP BY p.id, c.name, s.name
ORDER BY 
  CASE WHEN $6 = 'name' AND $7 = 'asc' THEN p.name END ASC,
  CASE WHEN $6 = 'name' AND $7 = 'desc' THEN p.name END DESC,
  CASE WHEN $6 = 'unit_price' AND $7 = 'asc' THEN p.unit_price END ASC,
  CASE WHEN $6 = 'unit_price' AND $7 = 'desc' THEN p.unit_price END DESC,
  CASE WHEN $6 = 'created_at' AND $7 = 'asc' THEN p.created_at END ASC,
  CASE WHEN $6 = 'created_at' AND $7 = 'desc' THEN p.created_at END DESC
LIMIT $4 OFFSET $5
`

type ListProductsWithStockParams struct {
	Column1 string      `json:"column_1"`
	Column2 pgtype.UUID `json:"column_2"`
	Column3 pgtype.UUID `json:"column_3"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
	Column6 interface{} `json:"column_6"`
	Column7 interface{} `json:"column_7"`
}

type ListProductsWithStockRow struct {
	ID             pgtype.UUID        `json:"id"`
	Sku            string             `json:"sku"`
	Name           string             `json:"name"`
	Description    *string            `json:"description"`
	Category       *string            `json:"category"`
	UnitPrice      pgtype.Numeric     `json:"unit_price"`
	IsActive       *bool              `json:"is_active"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	CategoryID     pgtype.UUID        `json:"category_id"`
	SupplierID     pgtype.UUID        `json:"supplier_id"`
	MinStockLevel  *int32             `json:"min_stock_level"`
	CategoryName   *string            `json:"category_name"`
	SupplierName   *string            `json:"supplier_name"`
	TotalStock     interface{}        `json:"total_stock"`
	TotalReserved  interface{}        `json:"total_reserved"`
	TotalAvailable interface{}        `json:"total_available"`
}

func (q *Queries) ListProductsWithStock(ctx context.Context, arg *ListProductsWithStockParams) ([]*ListProductsWithStockRow, error) {
	rows, err := q.db.Query(ctx, ListProductsWithStock,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Limit,
		arg.Offset,
		arg.Column6,
		arg.Column7,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListProductsWithStockRow{}
	for rows.Next() {
		var i ListProductsWithStockRow
		if err := rows.Scan(
			&i.ID,
			&i.Sku,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.UnitPrice,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CategoryID,
			&i.SupplierID,
			&i.MinStockLevel,
			&i.CategoryName,
			&i.SupplierName,
			&i.TotalStock,
			&i.TotalReserved,
			&i.TotalAvailable,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateProduct = `-- name: UpdateProduct :one
UPDATE products
SET sku = $2, name = $3, description = $4, category_id = $5, supplier_id = $6, unit_price = $7, min_stock_level = $8, updated_at = NOW()
WHERE id = $1
RETURNING id, sku, name, description, category, unit_price, is_active, created_at, updated_at, category_id, supplier_id, min_stock_level
`

type UpdateProductParams struct {
	ID            pgtype.UUID    `json:"id"`
	Sku           string         `json:"sku"`
	Name          string         `json:"name"`
	Description   *string        `json:"description"`
	CategoryID    pgtype.UUID    `json:"category_id"`
	SupplierID    pgtype.UUID    `json:"supplier_id"`
	UnitPrice     pgtype.Numeric `json:"unit_price"`
	MinStockLevel *int32         `json:"min_stock_level"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg *UpdateProductParams) (*Product, error) {
	row := q.db.QueryRow(ctx, UpdateProduct,
		arg.ID,
		arg.Sku,
		arg.Name,
		arg.Description,
		arg.CategoryID,
		arg.SupplierID,
		arg.UnitPrice,
		arg.MinStockLevel,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Sku,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.UnitPrice,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CategoryID,
		&i.SupplierID,
		&i.MinStockLevel,
	)
	return &i, err
}
