// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: warehouses.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CountWarehouses = `-- name: CountWarehouses :one
SELECT COUNT(*) FROM warehouses
WHERE is_active = true
`

func (q *Queries) CountWarehouses(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, CountWarehouses)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountWarehousesWithFilter = `-- name: CountWarehousesWithFilter :one
SELECT COUNT(*) FROM warehouses
WHERE ($1::text IS NULL OR name ILIKE '%' || $1 || '%')
  AND ($2::bool IS NULL OR is_active = $2)
`

type CountWarehousesWithFilterParams struct {
	Column1 string `json:"column_1"`
	Column2 bool   `json:"column_2"`
}

func (q *Queries) CountWarehousesWithFilter(ctx context.Context, arg *CountWarehousesWithFilterParams) (int64, error) {
	row := q.db.QueryRow(ctx, CountWarehousesWithFilter, arg.Column1, arg.Column2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateWarehouse = `-- name: CreateWarehouse :one
INSERT INTO warehouses (name, location, address, contact_person, contact_phone, is_active)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, location, address, contact_person, contact_phone, is_active, created_at, updated_at
`

type CreateWarehouseParams struct {
	Name          string  `json:"name"`
	Location      string  `json:"location"`
	Address       *string `json:"address"`
	ContactPerson *string `json:"contact_person"`
	ContactPhone  *string `json:"contact_phone"`
	IsActive      *bool   `json:"is_active"`
}

func (q *Queries) CreateWarehouse(ctx context.Context, arg *CreateWarehouseParams) (*Warehouse, error) {
	row := q.db.QueryRow(ctx, CreateWarehouse,
		arg.Name,
		arg.Location,
		arg.Address,
		arg.ContactPerson,
		arg.ContactPhone,
		arg.IsActive,
	)
	var i Warehouse
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.Address,
		&i.ContactPerson,
		&i.ContactPhone,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const DeleteWarehouse = `-- name: DeleteWarehouse :exec
UPDATE warehouses
SET is_active = false, updated_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteWarehouse(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, DeleteWarehouse, id)
	return err
}

const GetWarehouse = `-- name: GetWarehouse :one
SELECT id, name, location, address, contact_person, contact_phone, is_active, created_at, updated_at FROM warehouses
WHERE id = $1
`

func (q *Queries) GetWarehouse(ctx context.Context, id pgtype.UUID) (*Warehouse, error) {
	row := q.db.QueryRow(ctx, GetWarehouse, id)
	var i Warehouse
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.Address,
		&i.ContactPerson,
		&i.ContactPhone,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetWarehouseByName = `-- name: GetWarehouseByName :one
SELECT id, name, location, address, contact_person, contact_phone, is_active, created_at, updated_at FROM warehouses
WHERE name = $1
`

func (q *Queries) GetWarehouseByName(ctx context.Context, name string) (*Warehouse, error) {
	row := q.db.QueryRow(ctx, GetWarehouseByName, name)
	var i Warehouse
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.Address,
		&i.ContactPerson,
		&i.ContactPhone,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const ListWarehouses = `-- name: ListWarehouses :many
SELECT id, name, location, address, contact_person, contact_phone, is_active, created_at, updated_at FROM warehouses
WHERE is_active = true
ORDER BY name
LIMIT $1 OFFSET $2
`

type ListWarehousesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListWarehouses(ctx context.Context, arg *ListWarehousesParams) ([]*Warehouse, error) {
	rows, err := q.db.Query(ctx, ListWarehouses, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Warehouse{}
	for rows.Next() {
		var i Warehouse
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.Address,
			&i.ContactPerson,
			&i.ContactPhone,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListWarehousesWithFilter = `-- name: ListWarehousesWithFilter :many
SELECT id, name, location, address, contact_person, contact_phone, is_active, created_at, updated_at FROM warehouses
WHERE ($1::text IS NULL OR name ILIKE '%' || $1 || '%')
  AND ($2::bool IS NULL OR is_active = $2)
ORDER BY name
LIMIT $3 OFFSET $4
`

type ListWarehousesWithFilterParams struct {
	Column1 string `json:"column_1"`
	Column2 bool   `json:"column_2"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

func (q *Queries) ListWarehousesWithFilter(ctx context.Context, arg *ListWarehousesWithFilterParams) ([]*Warehouse, error) {
	rows, err := q.db.Query(ctx, ListWarehousesWithFilter,
		arg.Column1,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Warehouse{}
	for rows.Next() {
		var i Warehouse
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.Address,
			&i.ContactPerson,
			&i.ContactPhone,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateWarehouse = `-- name: UpdateWarehouse :one
UPDATE warehouses
SET name = $2, location = $3, address = $4, contact_person = $5, contact_phone = $6, is_active = $7, updated_at = NOW()
WHERE id = $1
RETURNING id, name, location, address, contact_person, contact_phone, is_active, created_at, updated_at
`

type UpdateWarehouseParams struct {
	ID            pgtype.UUID `json:"id"`
	Name          string      `json:"name"`
	Location      string      `json:"location"`
	Address       *string     `json:"address"`
	ContactPerson *string     `json:"contact_person"`
	ContactPhone  *string     `json:"contact_phone"`
	IsActive      *bool       `json:"is_active"`
}

func (q *Queries) UpdateWarehouse(ctx context.Context, arg *UpdateWarehouseParams) (*Warehouse, error) {
	row := q.db.QueryRow(ctx, UpdateWarehouse,
		arg.ID,
		arg.Name,
		arg.Location,
		arg.Address,
		arg.ContactPerson,
		arg.ContactPhone,
		arg.IsActive,
	)
	var i Warehouse
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.Address,
		&i.ContactPerson,
		&i.ContactPhone,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
