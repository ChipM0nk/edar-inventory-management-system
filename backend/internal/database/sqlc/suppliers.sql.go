// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: suppliers.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CountSuppliersWithFilter = `-- name: CountSuppliersWithFilter :one
SELECT COUNT(*) FROM suppliers
WHERE ($1::text IS NULL OR name ILIKE '%' || $1 || '%')
  AND ($2::text IS NULL OR contact_person ILIKE '%' || $2 || '%')
  AND ($3::text IS NULL OR email ILIKE '%' || $3 || '%')
  AND ($4::text IS NULL OR city ILIKE '%' || $4 || '%')
  AND ($5::boolean IS NULL OR is_active = $5)
`

type CountSuppliersWithFilterParams struct {
	Column1 string `json:"column_1"`
	Column2 string `json:"column_2"`
	Column3 string `json:"column_3"`
	Column4 string `json:"column_4"`
	Column5 bool   `json:"column_5"`
}

func (q *Queries) CountSuppliersWithFilter(ctx context.Context, arg *CountSuppliersWithFilterParams) (int64, error) {
	row := q.db.QueryRow(ctx, CountSuppliersWithFilter,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateSupplier = `-- name: CreateSupplier :one
INSERT INTO suppliers (name, contact_person, email, phone, address, city, state, country, postal_code, is_active)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, name, contact_person, email, phone, address, city, state, country, postal_code, is_active, created_at, updated_at
`

type CreateSupplierParams struct {
	Name          string  `json:"name"`
	ContactPerson *string `json:"contact_person"`
	Email         *string `json:"email"`
	Phone         *string `json:"phone"`
	Address       *string `json:"address"`
	City          *string `json:"city"`
	State         *string `json:"state"`
	Country       *string `json:"country"`
	PostalCode    *string `json:"postal_code"`
	IsActive      *bool   `json:"is_active"`
}

func (q *Queries) CreateSupplier(ctx context.Context, arg *CreateSupplierParams) (*Supplier, error) {
	row := q.db.QueryRow(ctx, CreateSupplier,
		arg.Name,
		arg.ContactPerson,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.City,
		arg.State,
		arg.Country,
		arg.PostalCode,
		arg.IsActive,
	)
	var i Supplier
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ContactPerson,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.City,
		&i.State,
		&i.Country,
		&i.PostalCode,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const DeleteSupplier = `-- name: DeleteSupplier :exec
UPDATE suppliers
SET is_active = false, updated_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteSupplier(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, DeleteSupplier, id)
	return err
}

const GetSupplier = `-- name: GetSupplier :one
SELECT id, name, contact_person, email, phone, address, city, state, country, postal_code, is_active, created_at, updated_at FROM suppliers
WHERE id = $1
`

func (q *Queries) GetSupplier(ctx context.Context, id pgtype.UUID) (*Supplier, error) {
	row := q.db.QueryRow(ctx, GetSupplier, id)
	var i Supplier
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ContactPerson,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.City,
		&i.State,
		&i.Country,
		&i.PostalCode,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetSupplierByName = `-- name: GetSupplierByName :one
SELECT id, name, contact_person, email, phone, address, city, state, country, postal_code, is_active, created_at, updated_at FROM suppliers
WHERE name = $1
`

func (q *Queries) GetSupplierByName(ctx context.Context, name string) (*Supplier, error) {
	row := q.db.QueryRow(ctx, GetSupplierByName, name)
	var i Supplier
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ContactPerson,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.City,
		&i.State,
		&i.Country,
		&i.PostalCode,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const ListSuppliers = `-- name: ListSuppliers :many
SELECT id, name, contact_person, email, phone, address, city, state, country, postal_code, is_active, created_at, updated_at FROM suppliers
WHERE is_active = true
ORDER BY name
`

func (q *Queries) ListSuppliers(ctx context.Context) ([]*Supplier, error) {
	rows, err := q.db.Query(ctx, ListSuppliers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Supplier{}
	for rows.Next() {
		var i Supplier
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ContactPerson,
			&i.Email,
			&i.Phone,
			&i.Address,
			&i.City,
			&i.State,
			&i.Country,
			&i.PostalCode,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListSuppliersWithFilter = `-- name: ListSuppliersWithFilter :many
SELECT id, name, contact_person, email, phone, address, city, state, country, postal_code, is_active, created_at, updated_at FROM suppliers
WHERE ($1::text IS NULL OR name ILIKE '%' || $1 || '%')
  AND ($2::text IS NULL OR contact_person ILIKE '%' || $2 || '%')
  AND ($3::text IS NULL OR email ILIKE '%' || $3 || '%')
  AND ($4::text IS NULL OR city ILIKE '%' || $4 || '%')
  AND ($5::boolean IS NULL OR is_active = $5)
ORDER BY 
  CASE WHEN $8 = 'name' AND $9 = 'asc' THEN name END ASC,
  CASE WHEN $8 = 'name' AND $9 = 'desc' THEN name END DESC,
  CASE WHEN $8 = 'created_at' AND $9 = 'asc' THEN created_at END ASC,
  CASE WHEN $8 = 'created_at' AND $9 = 'desc' THEN created_at END DESC
LIMIT $6 OFFSET $7
`

type ListSuppliersWithFilterParams struct {
	Column1 string      `json:"column_1"`
	Column2 string      `json:"column_2"`
	Column3 string      `json:"column_3"`
	Column4 string      `json:"column_4"`
	Column5 bool        `json:"column_5"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
	Column8 interface{} `json:"column_8"`
	Column9 interface{} `json:"column_9"`
}

func (q *Queries) ListSuppliersWithFilter(ctx context.Context, arg *ListSuppliersWithFilterParams) ([]*Supplier, error) {
	rows, err := q.db.Query(ctx, ListSuppliersWithFilter,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Limit,
		arg.Offset,
		arg.Column8,
		arg.Column9,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Supplier{}
	for rows.Next() {
		var i Supplier
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ContactPerson,
			&i.Email,
			&i.Phone,
			&i.Address,
			&i.City,
			&i.State,
			&i.Country,
			&i.PostalCode,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateSupplier = `-- name: UpdateSupplier :one
UPDATE suppliers
SET name = $2, contact_person = $3, email = $4, phone = $5, address = $6, 
    city = $7, state = $8, country = $9, postal_code = $10, is_active = $11, updated_at = NOW()
WHERE id = $1
RETURNING id, name, contact_person, email, phone, address, city, state, country, postal_code, is_active, created_at, updated_at
`

type UpdateSupplierParams struct {
	ID            pgtype.UUID `json:"id"`
	Name          string      `json:"name"`
	ContactPerson *string     `json:"contact_person"`
	Email         *string     `json:"email"`
	Phone         *string     `json:"phone"`
	Address       *string     `json:"address"`
	City          *string     `json:"city"`
	State         *string     `json:"state"`
	Country       *string     `json:"country"`
	PostalCode    *string     `json:"postal_code"`
	IsActive      *bool       `json:"is_active"`
}

func (q *Queries) UpdateSupplier(ctx context.Context, arg *UpdateSupplierParams) (*Supplier, error) {
	row := q.db.QueryRow(ctx, UpdateSupplier,
		arg.ID,
		arg.Name,
		arg.ContactPerson,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.City,
		arg.State,
		arg.Country,
		arg.PostalCode,
		arg.IsActive,
	)
	var i Supplier
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ContactPerson,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.City,
		&i.State,
		&i.Country,
		&i.PostalCode,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
